schemaVersion: 2.2.0
metadata:
  name: PTT
#attributes:
#  controller.devfile.io/storage-type: ephemeral
components:
  - name: tools
    container:
      image: alm-repos.sogei.it/devfile/universal-developer-image:ubi8-4407fa4_v2.2
      env:
        - name: spring_profiles_active
          value: devspaces
#        - name: MAVEN_OPTS
#          value: "-Dmaven.wagon.http.ssl.insecure=true"
      endpoints:
        - exposure: none
          name: debug
          protocol: tcp
          targetPort: 5005
        - exposure: public
          name: app
          protocol: http
          targetPort: 8080
          path: /
        - exposure: public
          name: ms-nir
          protocol: http
          targetPort: 5001
          path: /nir/1
      volumeMounts:
        - name: m2
          path: /home/user/.m2
      memoryLimit: 3G
      cpuLimit: 1500m
      cpuRequest: 400m
      mountSources: true

  - name: m2
    volume:
      size: 2G


#  - name: kafka
#    openshift:
#      uri: 'https://raw.githubusercontent.com/pietroaragona/openshift-devspaces-assets/main/kafka-deployment-v0.3.yaml'
#      endpoints:
#        - name: kafka-broker
#          targetPort: 9092
#        - name: kafka-ui
#          targetPort: 8888
#          path: /

#  - name: kafka
#    kubernetes:
#      deployByDefault: true
#      inlined: |
#        apiVersion: v1
#        kind: Pod
#        metadata:
#          name: kafka
#        spec:
#          containers:
#            - image: docker.io/lsnidero/kafka
#              name: kafka
#              ports:
#                - name: broker-9092
#                  containerPort: 9092

#  - name: kafka
#    openshift:
#      uri: 'kafka-deployment-v0.3.yaml'
#      endpoints:
#        - name: kafka-broker
#          targetPort: 9092
#        - name: kafka-ui
#          targetPort: 8888
#          path: /

  - name: kafka
    container:
      image: docker.io/lsnidero/kafka
      endpoints:
        - name: kafka-broker
          targetPort: 9092
        - name: zookeeper
          targetPort: 2181
          exposure: internal
      volumeMounts:
        - name: zookeeper-vol
          path: /var/lib/zookeeper
      memoryLimit: 768Mi
      mountSources: true

#  - name: nginx
#    kubernetes:
#      deployByDefault: true
#      inlined: |
#        apiVersion: apps/v1
#        kind: Deployment
#        metadata:
#          name: nginx
#        spec:
#          selector:
#            matchLabels:
#              app: nginx
#          template:
#            metadata:
#              labels:
#                app: nginx
#            spec:
#              containers:
#                - name: nginx
#                  image: nginxinc/nginx-unprivileged
#                  ports:
#                    - containerPort: 80

    

  - name: zookeeper-vol
    volume:
      size: 1G
      ephemeral: true

  - name: kafka-ui
    container:
      image: provectuslabs/kafka-ui:v0.5.0
      endpoints:
        - name: kafka-ui
          targetPort: 8888
      memoryLimit: 1024Mi
      cpuLimit: 500m
      cpuRequest: 10m
      env:
        - name: KAFKA_CLUSTERS_0_NAMEl
          value: local
        - name: KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
          value: localhost:9092
        - name: KAFKA_CLUSTERS_0_ZOOKEEPER
          value: localhost:2181
        - name: KAFKA_CLUSTERS_0_READONLY
          value: "false"
        - name: SERVER_PORT
          value: "8888"

  - name: oracle
    container:
      image: 'alm-repos.sogei.it/ptt/oracle-init:1.1'
      command:
        - sleep
        - infinity
      memoryLimit: 768Mi
      mountSources: true

commands:
  - id: setup-environment
    exec:
      label: Task automatico
      component: tools
      workingDir: ${PROJECTS_ROOT}
      commandLine: |
        # set java version
        . /home/user/.sdkman/bin/sdkman-init.sh
        JAVA_V=17.0.3-tem
        sdk install java $JAVA_V
        sdk default java $JAVA_V

        # configure settings.xml and .npmrc
        setup_configurations_files(){
          MVN_SETTINGS_REMOTE="https://alm-repos.sogei.it/repository/codeready-plugins/assets/settings-https-v1.xml"
          mkdir -p /home/user/.m2
          wget  -q --no-check-certificate $MVN_SETTINGS_REMOTE -O /home/user/.m2/settings.xml
        
          echo registry=https://alm-repos.sogei.it/repository/npm-group/ > /home/user/.npmrc
          echo cafile=/etc/pki/ca-trust/source/anchors/alm-repos.sogei.it-ca.crt >> /home/user/.npmrc
        }
        setup_configurations_files

        # configure git credential.helper
        git config --global credential.helper 'cache --timeout 36000'

  - id: download-repos
    exec:
      label: 0.1 - Initial Environment Setup
      component: tools
      workingDir: ${PROJECTS_ROOT}
      commandLine: curl -s https://alm-repos.sogei.it/repository/codeready-plugins/assets/scripts/setup-ptt-v8.sh | bash

  - id: setup-databases
    exec:
      label: 0.2 Initial Microservices Databases Setup
      component: oracle
      commandLine: |
        ORACLE_SYS_PASSWORD=ptt_database
        ORACLE_DB_NAME=ptt_database
        
        DB_HOST=oracle.common-ptt
        DB_USER_PREFIX=${DEVWORKSPACE_NAMESPACE//-/}
        DB_PASSWORD=changeit
        
        function configure_microservice_schema {
        
        MICROSERVICE=$1          
        DB_USER=${DB_USER_PREFIX}_${MICROSERVICE//-/}
        
        /opt/oracle/createDevUser.sh  ${DB_HOST} \
        ${ORACLE_SYS_PASSWORD} ${ORACLE_DB_NAME} \
        ${DB_USER} ${DB_PASSWORD}
        
        echo "Configuration successful for Microservice ${MICROSERVICE}!"
        echo "Username: ${DB_USER}"
        echo "Password: ${DB_PASSWORD}"
        
        SPRING_BOOT_TEST_FOLDER=${PROJECTS_ROOT}/${MICROSERVICE}/src/test/resources
        SPRING_BOOT_TEST_PROPERTIES_FILE=${SPRING_BOOT_TEST_FOLDER}/application-devspaces.properties
        SPRING_BOOT_MAIN_FOLDER=${PROJECTS_ROOT}/${MICROSERVICE}/src/main/resources
        SPRING_BOOT_MAIN_PROPERTIES_FILE=${SPRING_BOOT_MAIN_FOLDER}/application-devspaces.properties
        mkdir -p ${SPRING_BOOT_TEST_FOLDER} ${SPRING_BOOT_MAIN_FOLDER}
        
        cat <<EOF > ${SPRING_BOOT_TEST_PROPERTIES_FILE}
        spring.datasource.url=jdbc:oracle:thin:@${DB_HOST}:1521/${ORACLE_DB_NAME}
        spring.datasource.username=${DB_USER}
        spring.datasource.password=${DB_PASSWORD}
        spring.kafka.bootstrap-servers=localhost:9092
        EOF
        
        cp ${SPRING_BOOT_TEST_PROPERTIES_FILE} ${SPRING_BOOT_MAIN_PROPERTIES_FILE}
        }
        
        configure_microservice_schema ms-nir
        configure_microservice_schema ms-doc





  - id: run-debug
    exec:
      label: 1 - Run Debug
      component: tools
      workingDir: ${PROJECT_SOURCE}
      commandLine: |
        mvn spring-boot:run -DskipTests \
        -Dspring-boot.run.jvmArguments='-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005,quiet=y'
      group:
        kind: run
        isDefault: true


  - id: composite-initial-setup
    composite:
      commands:
        - install-plugins
        - setup-environment
        - setup-databases

#events:
#  postStart:
#    - composite-initial-setup
##    - install-plugins
##    - setup-environment
##    - setup-databases
events:
  postStart:
    - setup-environment